{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n// Variables\nvar buttonStart = document.querySelector(\".start\");\nvar buttonRestart = document.querySelector(\".restart\");\nvar score = document.querySelector(\".game-score\");\nvar cells = document.querySelectorAll(\".field-cell\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar scoreValue = 0;\nvar connectedCells = {};\n// Check status\nvar isCellConnected = function(index) {\n    return connectedCells[index];\n};\n// Set status\nvar setCellConnected = function(index) {\n    var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n    connectedCells[index] = value;\n};\n// Returns random indexes\nvar getRandomIndexes = function getRandomIndexes(array) {\n    var fIndex = Math.floor(Math.random() * array.length);\n    var sIndex = Math.floor(Math.random() * array.length);\n    while(fIndex === sIndex)sIndex = Math.floor(Math.random() * array.length);\n    return [\n        fIndex,\n        sIndex\n    ];\n};\n// Checks if an element has a modification\nvar includeMod = function includeMod(element) {\n    var elementClasses = Array.from(element.classList);\n    return elementClasses.some(function(classen) {\n        return classen.startsWith(\"field-cell--\");\n    });\n};\n// Returns modification of classes\nvar modNumber = function modNumber(elementWithMod) {\n    var classMod = Array.from(elementWithMod.classList).join(\" \");\n    var elementMod = classMod.split(\"--\");\n    return elementMod[elementMod.length - 1];\n};\nfunction getRandomIndex(array) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n// Sets new values on the field\nvar newValuesOnField = function newValuesOnField() {\n    var freeCells = [];\n    for(var index = 0; index < cells.length; index++){\n        var cell = cells[index];\n        if (!includeMod(cell)) freeCells.push(index);\n    }\n    if (freeCells.length > 0) {\n        var randomIndex = getRandomIndex(freeCells);\n        var number = Math.random() < 0.1 ? 4 : 2;\n        cells[randomIndex].classList.add(\"field-cell--\".concat(number));\n        cells[randomIndex].textContent = \"\".concat(number);\n    }\n};\n// Checks all Modified\nvar areAllCellsModified = function areAllCellsModified(ch) {\n    for(var index = 0; index < ch.length; index++){\n        if (!includeMod(ch[index])) return false;\n    }\n    return true;\n};\n// Checks coonect\nvar canConnectCells = function canConnectCells(item) {\n    for(var index = 0; index < item.length; index++){\n        var cell = item[index];\n        if (includeMod(cell)) {\n            var mod = modNumber(cell);\n            if (index - 4 >= 0) {\n                var topCell = item[index - 4];\n                if (includeMod(topCell) && modNumber(topCell) === mod) return true;\n            }\n            if (index + 4 < item.length) {\n                var bottomCell = item[index + 4];\n                if (includeMod(bottomCell) && modNumber(bottomCell) === mod) return true;\n            }\n            if (index % 4 !== 0) {\n                var leftCell = item[index - 1];\n                if (includeMod(leftCell) && modNumber(leftCell) === mod) return true;\n            }\n            if ((index + 1) % 4 !== 0) {\n                var rightCell = item[index + 1];\n                if (includeMod(rightCell) && modNumber(rightCell) === mod) return true;\n            }\n        }\n    }\n    return false;\n};\n// Loose the Game\nvar checkToRestart = function checkToRestart(arr) {\n    var messageWinClasses = Array.from(messageWin.classList);\n    if (messageWinClasses.includes(\"hidden\")) {\n        if (areAllCellsModified(arr) && !canConnectCells(arr)) messageLose.classList.remove(\"hidden\");\n    }\n};\n// Win the Game\nvar checkToWin = function checkToWin(mod) {\n    if (mod * 2 === 2048) messageWin.classList.remove(\"hidden\");\n};\n// Sets score\nvar setScore = function setScore(modification) {\n    var value = modification * 2;\n    scoreValue += value;\n    score.textContent = \"\";\n    score.textContent = \"\".concat(scoreValue);\n};\n// Event Move Up\nvar moveUp = function moveUp(arrayOfCells) {\n    var cellsMoved = false;\n    for(var index = 0; index < arrayOfCells.length; index++){\n        var cell = arrayOfCells[index];\n        if (includeMod(cell)) {\n            if (index - 4 >= 0) {\n                var newCellIndex = index - 4;\n                var mod = modNumber(cell);\n                while(newCellIndex >= 0){\n                    if (includeMod(arrayOfCells[newCellIndex]) && !isCellConnected(newCellIndex)) {\n                        var firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n                        var secondClass = Array.from(arrayOfCells[newCellIndex + 4].classList);\n                        if (firstClass[firstClass.length - 1] !== secondClass[secondClass.length - 1]) break;\n                    } else if (isCellConnected(newCellIndex) !== undefined) break;\n                    var modClasses = Array.from(arrayOfCells[newCellIndex + 4].classList);\n                    for(var i = 0; i < modClasses.length; i++){\n                        var className = modClasses[i];\n                        if (className !== \"field-cell\") arrayOfCells[newCellIndex + 4].classList.remove(className);\n                    }\n                    arrayOfCells[newCellIndex + 4].textContent = \"\";\n                    if (arrayOfCells[newCellIndex].classList.contains(\"field-cell--\".concat(mod))) {\n                        arrayOfCells[newCellIndex].classList.remove(\"field-cell--\".concat(mod));\n                        arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod * 2));\n                        arrayOfCells[newCellIndex].textContent = \"\".concat(mod * 2);\n                        setCellConnected(newCellIndex);\n                        setScore(mod);\n                        cellsMoved = true;\n                        checkToWin(mod);\n                        break;\n                    }\n                    arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod));\n                    arrayOfCells[newCellIndex].textContent = \"\".concat(mod);\n                    cellsMoved = true;\n                    newCellIndex -= 4;\n                }\n            }\n        }\n    }\n    if (cellsMoved) newValuesOnField();\n    checkToRestart(arrayOfCells);\n    connectedCells = {};\n};\n// Event Move Dowm\nvar moveDown = function moveDown(arrayOfCells) {\n    var cellsMoved = false;\n    for(var index = arrayOfCells.length - 1; index >= 0; index--){\n        var cell = arrayOfCells[index];\n        if (includeMod(cell)) {\n            if (index + 4 < cells.length) {\n                var newCellIndex = index + 4;\n                var mod = modNumber(cell);\n                while(newCellIndex < cells.length){\n                    if (includeMod(arrayOfCells[newCellIndex]) && !isCellConnected(newCellIndex)) {\n                        var firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n                        var secondClass = Array.from(arrayOfCells[newCellIndex - 4].classList);\n                        if (firstClass[firstClass.length - 1] !== secondClass[secondClass.length - 1]) break;\n                    } else if (isCellConnected(newCellIndex) !== undefined) break;\n                    var modClasses = Array.from(arrayOfCells[newCellIndex - 4].classList);\n                    for(var i = 0; i < modClasses.length; i++){\n                        var className = modClasses[i];\n                        if (className !== \"field-cell\") arrayOfCells[newCellIndex - 4].classList.remove(className);\n                    }\n                    arrayOfCells[newCellIndex - 4].textContent = \"\";\n                    if (arrayOfCells[newCellIndex].classList.contains(\"field-cell--\".concat(mod))) {\n                        arrayOfCells[newCellIndex].classList.remove(\"field-cell--\".concat(mod));\n                        arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod * 2));\n                        arrayOfCells[newCellIndex].textContent = \"\".concat(mod * 2);\n                        setCellConnected(newCellIndex);\n                        setScore(mod);\n                        cellsMoved = true;\n                        checkToWin(mod);\n                        break;\n                    }\n                    arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod));\n                    arrayOfCells[newCellIndex].textContent = \"\".concat(mod);\n                    cellsMoved = true;\n                    newCellIndex += 4;\n                }\n            }\n        }\n    }\n    if (cellsMoved) newValuesOnField();\n    checkToRestart(arrayOfCells);\n    connectedCells = {};\n};\n// Event Move Left\nvar moveLeft = function moveLeft(arrayOfCells) {\n    var specialNumbers = [\n        0,\n        4,\n        8,\n        12\n    ];\n    var cellsMoved = false;\n    for(var index = 0; index < arrayOfCells.length; index++){\n        var cell = arrayOfCells[index];\n        if (includeMod(cell)) {\n            var newCellIndex = index - 1;\n            var mod = modNumber(cell);\n            while(!specialNumbers.includes(newCellIndex + 1)){\n                if (!specialNumbers.includes(index)) {\n                    if (includeMod(arrayOfCells[newCellIndex]) && !isCellConnected(newCellIndex)) {\n                        var firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n                        var secondClass = Array.from(arrayOfCells[newCellIndex + 1].classList);\n                        if (firstClass[firstClass.length - 1] !== secondClass[secondClass.length - 1]) break;\n                    } else if (isCellConnected(newCellIndex) !== undefined) break;\n                    var modClasses = Array.from(arrayOfCells[newCellIndex + 1].classList);\n                    for(var i = 0; i < modClasses.length; i++){\n                        var className = modClasses[i];\n                        if (className !== \"field-cell\") arrayOfCells[newCellIndex + 1].classList.remove(className);\n                    }\n                    arrayOfCells[newCellIndex + 1].textContent = \"\";\n                    if (arrayOfCells[newCellIndex].classList.contains(\"field-cell--\".concat(mod))) {\n                        arrayOfCells[newCellIndex].classList.remove(\"field-cell--\".concat(mod));\n                        arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod * 2));\n                        arrayOfCells[newCellIndex].textContent = \"\".concat(mod * 2);\n                        setCellConnected(newCellIndex);\n                        setScore(mod);\n                        cellsMoved = true;\n                        checkToWin(mod);\n                        break;\n                    }\n                    arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod));\n                    arrayOfCells[newCellIndex].textContent = \"\".concat(mod);\n                    cellsMoved = true;\n                    newCellIndex -= 1;\n                } else break;\n            }\n        }\n    }\n    if (cellsMoved) newValuesOnField();\n    checkToRestart(arrayOfCells);\n    connectedCells = {};\n};\n// Event Move Left\nvar moveRight = function moveRight(arrayOfCells) {\n    var specialNumbers = [\n        3,\n        7,\n        11,\n        15\n    ];\n    var cellsMoved = false;\n    for(var index = arrayOfCells.length - 1; index >= 0; index--){\n        var cell = arrayOfCells[index];\n        if (includeMod(cell)) {\n            var newCellIndex = index + 1;\n            var mod = modNumber(cell);\n            while(!specialNumbers.includes(newCellIndex - 1)){\n                if (!specialNumbers.includes(index)) {\n                    if (includeMod(arrayOfCells[newCellIndex]) && !isCellConnected(newCellIndex)) {\n                        var firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n                        var secondClass = Array.from(arrayOfCells[newCellIndex - 1].classList);\n                        if (firstClass[firstClass.length - 1] !== secondClass[secondClass.length - 1]) break;\n                    } else if (isCellConnected(newCellIndex) !== undefined) break;\n                    var modClasses = Array.from(arrayOfCells[newCellIndex - 1].classList);\n                    for(var i = 0; i < modClasses.length; i++){\n                        var className = modClasses[i];\n                        if (className !== \"field-cell\") arrayOfCells[newCellIndex - 1].classList.remove(className);\n                    }\n                    arrayOfCells[newCellIndex - 1].textContent = \"\";\n                    if (arrayOfCells[newCellIndex].classList.contains(\"field-cell--\".concat(mod))) {\n                        arrayOfCells[newCellIndex].classList.remove(\"field-cell--\".concat(mod));\n                        arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod * 2));\n                        arrayOfCells[newCellIndex].textContent = \"\".concat(mod * 2);\n                        setCellConnected(newCellIndex);\n                        setScore(mod);\n                        cellsMoved = true;\n                        checkToWin(mod);\n                        break;\n                    }\n                    arrayOfCells[newCellIndex].classList.add(\"field-cell--\".concat(mod));\n                    arrayOfCells[newCellIndex].textContent = \"\".concat(mod);\n                    cellsMoved = true;\n                    newCellIndex += 1;\n                } else break;\n            }\n        }\n    }\n    if (cellsMoved) newValuesOnField();\n    checkToRestart(arrayOfCells);\n    connectedCells = {};\n};\n// Start\nbuttonStart.addEventListener(\"click\", function() {\n    buttonStart.classList.add(\"hidden\");\n    buttonRestart.classList.remove(\"hidden\");\n    var indexes = getRandomIndexes(cells);\n    cells[indexes[0]].classList.add(\"field-cell--2\");\n    cells[indexes[0]].textContent = \"2\";\n    cells[indexes[1]].classList.add(\"field-cell--2\");\n    cells[indexes[1]].textContent = \"2\";\n    messageStart.classList.add(\"hidden\");\n});\n// Restart\nbuttonRestart.addEventListener(\"click\", function() {\n    location.reload();\n});\n// Events\ndocument.addEventListener(\"keydown\", function(ev) {\n    var isMessageWinVisible = !messageWin.classList.contains(\"hidden\");\n    if (isMessageWinVisible) return;\n    if (ev.key === \"ArrowUp\") moveUp(cells);\n    else if (ev.key === \"ArrowDown\") moveDown(cells);\n    else if (ev.key === \"ArrowLeft\") moveLeft(cells);\n    else if (ev.key === \"ArrowRight\") moveRight(cells);\n});\n\n//# sourceMappingURL=index.33661afa.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\n// Variables\nconst buttonStart = document.querySelector('.start');\nconst buttonRestart = document.querySelector('.restart');\n\nconst score = document.querySelector('.game-score');\n\nconst cells = document.querySelectorAll('.field-cell');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nlet scoreValue = 0;\n\nlet connectedCells = {};\n\n// Check status\nconst isCellConnected = (index) => {\n  return connectedCells[index];\n};\n\n// Set status\nconst setCellConnected = (index, value = true) => {\n  connectedCells[index] = value;\n};\n\n// Returns random indexes\nconst getRandomIndexes = function (array) {\n  const fIndex = Math.floor(Math.random() * array.length);\n  let sIndex = Math.floor(Math.random() * array.length);\n\n  while (fIndex === sIndex) {\n    sIndex = Math.floor(Math.random() * array.length);\n  }\n\n  return [fIndex, sIndex];\n};\n\n// Checks if an element has a modification\nconst includeMod = function (element) {\n  const elementClasses = Array.from(element.classList);\n\n  return elementClasses.some((classen) => classen.startsWith('field-cell--'));\n};\n\n// Returns modification of classes\nconst modNumber = function (elementWithMod) {\n  const classMod = Array.from(elementWithMod.classList).join(' ');\n  const elementMod = classMod.split('--');\n\n  return elementMod[elementMod.length - 1];\n};\n\nfunction getRandomIndex(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n// Sets new values on the field\nconst newValuesOnField = function () {\n  const freeCells = [];\n\n  for (let index = 0; index < cells.length; index++) {\n    const cell = cells[index];\n\n    if (!includeMod(cell)) {\n      freeCells.push(index);\n    }\n  }\n\n  if (freeCells.length > 0) {\n    const randomIndex = getRandomIndex(freeCells);\n\n    const number = Math.random() < 0.1 ? 4 : 2;\n\n    cells[randomIndex].classList.add(`field-cell--${number}`);\n    cells[randomIndex].textContent = `${number}`;\n  }\n};\n\n// Checks all Modified\nconst areAllCellsModified = function (ch) {\n  for (let index = 0; index < ch.length; index++) {\n    if (!includeMod(ch[index])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// Checks coonect\nconst canConnectCells = function (item) {\n  for (let index = 0; index < item.length; index++) {\n    const cell = item[index];\n\n    if (includeMod(cell)) {\n      const mod = modNumber(cell);\n\n      if (index - 4 >= 0) {\n        const topCell = item[index - 4];\n\n        if (includeMod(topCell) && modNumber(topCell) === mod) {\n          return true;\n        }\n      }\n\n      if (index + 4 < item.length) {\n        const bottomCell = item[index + 4];\n\n        if (includeMod(bottomCell) && modNumber(bottomCell) === mod) {\n          return true;\n        }\n      }\n\n      if (index % 4 !== 0) {\n        const leftCell = item[index - 1];\n\n        if (includeMod(leftCell) && modNumber(leftCell) === mod) {\n          return true;\n        }\n      }\n\n      if ((index + 1) % 4 !== 0) {\n        const rightCell = item[index + 1];\n\n        if (includeMod(rightCell) && modNumber(rightCell) === mod) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\n// Loose the Game\nconst checkToRestart = function (arr) {\n  const messageWinClasses = Array.from(messageWin.classList);\n\n  if (messageWinClasses.includes('hidden')) {\n    if (areAllCellsModified(arr) && !canConnectCells(arr)) {\n      messageLose.classList.remove('hidden');\n    }\n  }\n};\n\n// Win the Game\nconst checkToWin = function (mod) {\n  if (mod * 2 === 2048) {\n    messageWin.classList.remove('hidden');\n  }\n};\n\n// Sets score\nconst setScore = function (modification) {\n  const value = modification * 2;\n\n  scoreValue += value;\n\n  score.textContent = '';\n  score.textContent = `${scoreValue}`;\n};\n\n// Event Move Up\nconst moveUp = function (arrayOfCells) {\n  let cellsMoved = false;\n\n  for (let index = 0; index < arrayOfCells.length; index++) {\n    const cell = arrayOfCells[index];\n\n    if (includeMod(cell)) {\n      if (index - 4 >= 0) {\n        let newCellIndex = index - 4;\n\n        const mod = modNumber(cell);\n\n        while (newCellIndex >= 0) {\n          if (\n            includeMod(arrayOfCells[newCellIndex]) &&\n            !isCellConnected(newCellIndex)\n          ) {\n            const firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n            const secondClass = Array.from(\n              arrayOfCells[newCellIndex + 4].classList,\n            );\n\n            if (\n              firstClass[firstClass.length - 1] !==\n              secondClass[secondClass.length - 1]\n            ) {\n              break;\n            }\n          } else if (isCellConnected(newCellIndex) !== undefined) {\n            break;\n          }\n\n          const modClasses = Array.from(\n            arrayOfCells[newCellIndex + 4].classList,\n          );\n\n          for (let i = 0; i < modClasses.length; i++) {\n            const className = modClasses[i];\n\n            if (className !== 'field-cell') {\n              arrayOfCells[newCellIndex + 4].classList.remove(className);\n            }\n          }\n\n          arrayOfCells[newCellIndex + 4].textContent = '';\n\n          if (\n            arrayOfCells[newCellIndex].classList.contains(`field-cell--${mod}`)\n          ) {\n            arrayOfCells[newCellIndex].classList.remove(`field-cell--${mod}`);\n            arrayOfCells[newCellIndex].classList.add(`field-cell--${mod * 2}`);\n\n            arrayOfCells[newCellIndex].textContent = `${mod * 2}`;\n\n            setCellConnected(newCellIndex);\n\n            setScore(mod);\n\n            cellsMoved = true;\n\n            checkToWin(mod);\n\n            break;\n          }\n\n          arrayOfCells[newCellIndex].classList.add(`field-cell--${mod}`);\n          arrayOfCells[newCellIndex].textContent = `${mod}`;\n\n          cellsMoved = true;\n\n          newCellIndex -= 4;\n        }\n      }\n    }\n  }\n\n  if (cellsMoved) {\n    newValuesOnField();\n  }\n\n  checkToRestart(arrayOfCells);\n\n  connectedCells = {};\n};\n\n// Event Move Dowm\nconst moveDown = function (arrayOfCells) {\n  let cellsMoved = false;\n\n  for (let index = arrayOfCells.length - 1; index >= 0; index--) {\n    const cell = arrayOfCells[index];\n\n    if (includeMod(cell)) {\n      if (index + 4 < cells.length) {\n        let newCellIndex = index + 4;\n\n        const mod = modNumber(cell);\n\n        while (newCellIndex < cells.length) {\n          if (\n            includeMod(arrayOfCells[newCellIndex]) &&\n            !isCellConnected(newCellIndex)\n          ) {\n            const firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n            const secondClass = Array.from(\n              arrayOfCells[newCellIndex - 4].classList,\n            );\n\n            if (\n              firstClass[firstClass.length - 1] !==\n              secondClass[secondClass.length - 1]\n            ) {\n              break;\n            }\n          } else if (isCellConnected(newCellIndex) !== undefined) {\n            break;\n          }\n\n          const modClasses = Array.from(\n            arrayOfCells[newCellIndex - 4].classList,\n          );\n\n          for (let i = 0; i < modClasses.length; i++) {\n            const className = modClasses[i];\n\n            if (className !== 'field-cell') {\n              arrayOfCells[newCellIndex - 4].classList.remove(className);\n            }\n          }\n\n          arrayOfCells[newCellIndex - 4].textContent = '';\n\n          if (\n            arrayOfCells[newCellIndex].classList.contains(`field-cell--${mod}`)\n          ) {\n            arrayOfCells[newCellIndex].classList.remove(`field-cell--${mod}`);\n            arrayOfCells[newCellIndex].classList.add(`field-cell--${mod * 2}`);\n\n            arrayOfCells[newCellIndex].textContent = `${mod * 2}`;\n\n            setCellConnected(newCellIndex);\n\n            setScore(mod);\n\n            cellsMoved = true;\n\n            checkToWin(mod);\n\n            break;\n          }\n\n          arrayOfCells[newCellIndex].classList.add(`field-cell--${mod}`);\n          arrayOfCells[newCellIndex].textContent = `${mod}`;\n\n          cellsMoved = true;\n\n          newCellIndex += 4;\n        }\n      }\n    }\n  }\n\n  if (cellsMoved) {\n    newValuesOnField();\n  }\n\n  checkToRestart(arrayOfCells);\n\n  connectedCells = {};\n};\n\n// Event Move Left\nconst moveLeft = function (arrayOfCells) {\n  const specialNumbers = [0, 4, 8, 12];\n  let cellsMoved = false;\n\n  for (let index = 0; index < arrayOfCells.length; index++) {\n    const cell = arrayOfCells[index];\n\n    if (includeMod(cell)) {\n      let newCellIndex = index - 1;\n\n      const mod = modNumber(cell);\n\n      while (!specialNumbers.includes(newCellIndex + 1)) {\n        if (!specialNumbers.includes(index)) {\n          if (\n            includeMod(arrayOfCells[newCellIndex]) &&\n            !isCellConnected(newCellIndex)\n          ) {\n            const firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n            const secondClass = Array.from(\n              arrayOfCells[newCellIndex + 1].classList,\n            );\n\n            if (\n              firstClass[firstClass.length - 1] !==\n              secondClass[secondClass.length - 1]\n            ) {\n              break;\n            }\n          } else if (isCellConnected(newCellIndex) !== undefined) {\n            break;\n          }\n\n          const modClasses = Array.from(\n            arrayOfCells[newCellIndex + 1].classList,\n          );\n\n          for (let i = 0; i < modClasses.length; i++) {\n            const className = modClasses[i];\n\n            if (className !== 'field-cell') {\n              arrayOfCells[newCellIndex + 1].classList.remove(className);\n            }\n          }\n\n          arrayOfCells[newCellIndex + 1].textContent = '';\n\n          if (\n            arrayOfCells[newCellIndex].classList.contains(`field-cell--${mod}`)\n          ) {\n            arrayOfCells[newCellIndex].classList.remove(`field-cell--${mod}`);\n            arrayOfCells[newCellIndex].classList.add(`field-cell--${mod * 2}`);\n\n            arrayOfCells[newCellIndex].textContent = `${mod * 2}`;\n\n            setCellConnected(newCellIndex);\n\n            setScore(mod);\n\n            cellsMoved = true;\n\n            checkToWin(mod);\n\n            break;\n          }\n\n          arrayOfCells[newCellIndex].classList.add(`field-cell--${mod}`);\n          arrayOfCells[newCellIndex].textContent = `${mod}`;\n\n          cellsMoved = true;\n\n          newCellIndex -= 1;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  if (cellsMoved) {\n    newValuesOnField();\n  }\n\n  checkToRestart(arrayOfCells);\n\n  connectedCells = {};\n};\n\n// Event Move Left\nconst moveRight = function (arrayOfCells) {\n  const specialNumbers = [3, 7, 11, 15];\n  let cellsMoved = false;\n\n  for (let index = arrayOfCells.length - 1; index >= 0; index--) {\n    const cell = arrayOfCells[index];\n\n    if (includeMod(cell)) {\n      let newCellIndex = index + 1;\n\n      const mod = modNumber(cell);\n\n      while (!specialNumbers.includes(newCellIndex - 1)) {\n        if (!specialNumbers.includes(index)) {\n          if (\n            includeMod(arrayOfCells[newCellIndex]) &&\n            !isCellConnected(newCellIndex)\n          ) {\n            const firstClass = Array.from(arrayOfCells[newCellIndex].classList);\n            const secondClass = Array.from(\n              arrayOfCells[newCellIndex - 1].classList,\n            );\n\n            if (\n              firstClass[firstClass.length - 1] !==\n              secondClass[secondClass.length - 1]\n            ) {\n              break;\n            }\n          } else if (isCellConnected(newCellIndex) !== undefined) {\n            break;\n          }\n\n          const modClasses = Array.from(\n            arrayOfCells[newCellIndex - 1].classList,\n          );\n\n          for (let i = 0; i < modClasses.length; i++) {\n            const className = modClasses[i];\n\n            if (className !== 'field-cell') {\n              arrayOfCells[newCellIndex - 1].classList.remove(className);\n            }\n          }\n\n          arrayOfCells[newCellIndex - 1].textContent = '';\n\n          if (\n            arrayOfCells[newCellIndex].classList.contains(`field-cell--${mod}`)\n          ) {\n            arrayOfCells[newCellIndex].classList.remove(`field-cell--${mod}`);\n            arrayOfCells[newCellIndex].classList.add(`field-cell--${mod * 2}`);\n\n            arrayOfCells[newCellIndex].textContent = `${mod * 2}`;\n\n            setCellConnected(newCellIndex);\n\n            setScore(mod);\n\n            cellsMoved = true;\n\n            checkToWin(mod);\n\n            break;\n          }\n\n          arrayOfCells[newCellIndex].classList.add(`field-cell--${mod}`);\n          arrayOfCells[newCellIndex].textContent = `${mod}`;\n\n          cellsMoved = true;\n\n          newCellIndex += 1;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n  if (cellsMoved) {\n    newValuesOnField();\n  }\n\n  checkToRestart(arrayOfCells);\n\n  connectedCells = {};\n};\n\n// Start\nbuttonStart.addEventListener('click', function () {\n  buttonStart.classList.add('hidden');\n  buttonRestart.classList.remove('hidden');\n\n  const indexes = getRandomIndexes(cells);\n\n  cells[indexes[0]].classList.add('field-cell--2');\n  cells[indexes[0]].textContent = '2';\n\n  cells[indexes[1]].classList.add('field-cell--2');\n  cells[indexes[1]].textContent = '2';\n\n  messageStart.classList.add('hidden');\n});\n\n// Restart\nbuttonRestart.addEventListener('click', () => {\n  location.reload();\n});\n\n// Events\ndocument.addEventListener('keydown', (ev) => {\n  const isMessageWinVisible = !messageWin.classList.contains('hidden');\n\n  if (isMessageWinVisible) {\n    return;\n  }\n\n  if (ev.key === 'ArrowUp') {\n    moveUp(cells);\n  } else if (ev.key === 'ArrowDown') {\n    moveDown(cells);\n  } else if (ev.key === 'ArrowLeft') {\n    moveLeft(cells);\n  } else if (ev.key === 'ArrowRight') {\n    moveRight(cells);\n  }\n});\n"],"names":["buttonStart","document","querySelector","buttonRestart","score","cells","querySelectorAll","messageStart","messageLose","messageWin","scoreValue","connectedCells","isCellConnected","index","setCellConnected","value","arguments","length","getRandomIndexes","array","fIndex","Math","floor","random","sIndex","includeMod","element","elementClasses","Array","from","classList","some","classen","startsWith","modNumber","elementWithMod","elementMod","classMod","join","split","newValuesOnField","freeCells","push","randomIndex","number","add","concat","textContent","areAllCellsModified","ch","canConnectCells","item","cell","mod","topCell","bottomCell","leftCell","rightCell","checkToRestart","arr","messageWinClasses","includes","remove","checkToWin","setScore","modification","moveUp","arrayOfCells","cellsMoved","newCellIndex","firstClass","secondClass","undefined","modClasses","i","className","contains","moveDown","moveLeft","specialNumbers","moveRight","addEventListener","indexes","location","reload","ev","key"],"version":3,"file":"index.33661afa.js.map"}